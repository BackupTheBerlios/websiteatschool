<?php
# This file is part of Website@School, a Content Management System especially designed for schools.
# Copyright (C) 2008-2011 Ingenieursbureau PSD/Peter Fokker <peter@berestijn.nl>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License version 3 as published by
# the Free Software Foundation supplemented with the Additional Terms, as set
# forth in the License Agreement for Website@School (see /program/license.html).
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License
# for more details.
#
# You should have received a copy of the License Agreement for Website@School
# along with this program. If not, see http://websiteatschool.eu/license.html

/** /program/main_admin.php - workhorse for site maintenance
 *
 * This file deals with the administrator interface program for site maintenance.
 * It is included and called from /admin.php.
 *
 * The work is done in {@link main_admin()}.
 *
 * @author Peter Fokker <peter@berestijn.nl>
 * @copyright Copyright (C) 2008-2011 Ingenieursbureau PSD/Peter Fokker
 * @license http://websiteatschool.eu/license.html GNU AGPLv3+Additional Terms
 * @package wascore
 * @version $Id: main_admin.php,v 1.3 2011/05/02 21:03:52 pfokker Exp $
 */
if (!defined('WASENTRY')) { die('no entry'); }


/** This is used to dispatch the startcenter job */
define('JOB_STARTCENTER','start');

/** This is used to dispatch the page manager */
define('JOB_PAGEMANAGER','pagemanager');

/** This is used to dispatch the file manager */
define('JOB_FILEMANAGER','filemanager');

/** This is used to dispatch the file manager in file browser mode (used with FCK Editor) */
define('JOB_FILEBROWSER','filebrowser');

/** This is used to dispatch the file manager in image browser mode (used with FCK Editor) */
define('JOB_IMAGEBROWSER','imagebrowser');

/** This is used to dispatch the file manager in flash browser mode (used with FCK Editor) */
define('JOB_FLASHBROWSER','flashbrowser');

/** This is used to dispatch the module manager */
define('JOB_MODULEMANAGER','modulemanager');

/** This is used to dispatch the account manager (users and groups) */
define('JOB_ACCOUNTMANAGER','accountmanager');

/** This is used to dispatch the configuration manager */
define('JOB_CONFIGURATIONMANAGER','configurationmanager');

/** This is used to dispatch the statistics */
define('JOB_STATISTICS','statistics');

/** This is used to dispatch the tool manager */
define('JOB_TOOLS','tools');

/** This is used to dispatch the update manager */
define('JOB_UPDATE','update');

/** main program for site maintenance
 *
 * This is the main administrator program.
 * First step is to deal with users logging in or out.
 * If a user is not logged in, a login dialog is displayed.
 * If a user is logged in but has no admin privileges, she
 * is redirected to the public site (ie. index.php).
 *
 * Once we have established that the user is an administrator,
 * we setup an output collecting object and see what the user
 * wants us to do by interpreting the parameter 'job'.
 * If the user has access to the specified job, the corresponding
 * code is included and the main routine of that handler is called.
 * It is then the responsability of that handler to further decide
 * what needs to be done.
 * After the handler returns, the collected output is sent to the user.
 * This includes the main navigation (i.e. links to the various
 * 'managers') and also the menu and the content generated by the
 * handler.
 *
 * If the user has no privilege to access a particular manager,
 * an error messate is displayed in both the message area and the content
 * area. This makes it clear to the user that access is denied.
 * Note that the inaccessible items are displayed in the main navigation
 * via 'dimmed' (light-grey) links or black/white images.
 * By showing these 'dimmed' links, the user will be aware that there
 * is more that just what she is allowed to see. This is more transparent
 * than suppressing items and keeping them secret.
 *
 * @return void generated page sent to user's browser
 * @uses $CFG;
 * @uses $LANGUAGE;
 * @uses $USER;
 * @todo should we cater for a special 'print' button + 
 *       support for a special style sheet for media="print"?
 */
function main_admin() {
    global $CFG;
    global $LANGUAGE;
    global $USER;
    global $PERFORMANCE;

    /** initialise, setup database, read configuration, etc. */
    require_once($CFG->progdir.'/init.php');
    initialise();

    // user must be logged in to perform any admin tasks at all
    if (isset($_GET['logout'])) {
        admin_logout_and_exit();
    } elseif (isset($_GET['login'])) {
        $user_id = admin_login(magic_unquote($_GET['login']));
    } elseif (isset($_COOKIE[$CFG->session_name])) {
        $user_id = admin_continue_session();
    } else {
        admin_show_login_and_exit();
    }

    /** useraccount.class.php is used to define the USER object */
    require_once($CFG->progdir.'/lib/useraccount.class.php');

    $USER = new Useraccount($user_id);
    $USER->is_logged_in = TRUE;
    $_SESSION['language_key'] = $LANGUAGE->get_current_language(); // remember language set via _GET or otherwise

    // Only admins are allowed, others are redirected to index.php
    if (!$USER->is_admin()) {
        logger("admin.php: '$USER->username' ($USER->user_id) is no administrator and was redirected to index.php");
        session_write_close();
        redirect_and_exit($CFG->www.'/index.php');
    }

    // We now know that this user is an admin, but
    // is she allowed to perform upgrades if any? Check it out in 2 steps
    // 1--we do NOT want exit on error if the user has enough privileges
    // 2--we check the version and stay here if the user has enough privileges
    $exit_on_error = ($USER->has_job_permissions(JOB_PERMISSION_UPDATE)) ? FALSE : TRUE;
    $need_to_update = (was_version_check($exit_on_error)) ? FALSE : TRUE;

    // We are still here if versions are OK _or_ versions mismatch but user has UPDATE privilege.

    // Now we know we _will_ be generating output => setup output object
    $output = new AdminOutput($CFG->title);
    $output->add_stylesheet($CFG->progwww_short.'/styles/admin_base.css');
    if ($USER->high_visibility) {
        $output->high_visibility = TRUE;
        $output->add_stylesheet($CFG->progwww_short.'/styles/admin_high_visibility.css');
    }

    // Display a 'welcome message' if this is the first page after logging in.
    if ($_SESSION['session_counter'] == 1) {
        $output->add_message(t('login_user_success','admin',array('{USERNAME}' => $USER->username)));
    }

    // Let's see what what job needs to be done
    $job = ($need_to_update) ? JOB_UPDATE : get_parameter_string('job',JOB_STARTCENTER);

    // main dispatcher
    switch ($job) {
        case JOB_STARTCENTER:
            job_start($output);
            break;

        case JOB_PAGEMANAGER:
            add_javascript_popup_function($output,'  ');
            if ($USER->has_job_permissions(JOB_PERMISSION_PAGEMANAGER)) {
                include($CFG->progdir.'/lib/pagemanager.class.php');
                $manager = new PageManager($output);
            } else {
                $output->add_content("<h2>".t('access_denied','admin')."</h2>");
                $output->add_content(t('job_access_denied','admin'));
                $output->add_message(t('job_access_denied','admin'));
            }
            break;

        case JOB_FILEMANAGER:
        case JOB_FILEBROWSER:
        case JOB_IMAGEBROWSER:
        case JOB_FLASHBROWSER:
            add_javascript_popup_function($output,'  ');
            add_javascript_select_url_function($output,'  ');
            if ($USER->has_job_permissions(JOB_PERMISSION_FILEMANAGER)) {
                include($CFG->progdir.'/lib/filemanager.class.php');
                $manager = new FileManager($output,$job);
            } else {
                $output->add_content("<h2>".t('access_denied','admin')."</h2>");
                $output->add_content(t('job_access_denied','admin'));
                $output->add_message(t('job_access_denied','admin'));
            }
            break;

        case JOB_MODULEMANAGER:
            if ($USER->has_job_permissions(JOB_PERMISSION_MODULEMANAGER)) {
                include($CFG->progdir.'/lib/modulemanagerlib.php');
                job_modulemanager($output);
            } else {
                $output->add_content("<h2>".t('access_denied','admin')."</h2>");
                $output->add_content(t('job_access_denied','admin'));
                $output->add_message(t('job_access_denied','admin'));
            }
            break;

        case JOB_ACCOUNTMANAGER:
            if ($USER->has_job_permissions(JOB_PERMISSION_ACCOUNTMANAGER)) {
                include($CFG->progdir.'/lib/accountmanagerlib.php');
                job_accountmanager($output);
            } else {
                $output->add_content("<h2>".t('access_denied','admin')."</h2>");
                $output->add_content(t('job_access_denied','admin'));
                $output->add_message(t('job_access_denied','admin'));
            }
            break;

        case JOB_CONFIGURATIONMANAGER:
            if ($USER->has_job_permissions(JOB_PERMISSION_CONFIGURATIONMANAGER)) {
                include($CFG->progdir.'/lib/configurationmanagerlib.php');
                job_configurationmanager($output);
            } else {
                $output->add_content("<h2>".t('access_denied','admin')."</h2>");
                $output->add_content(t('job_access_denied','admin'));
                $output->add_message(t('job_access_denied','admin'));
            }
            break;

        case JOB_STATISTICS:
            if ($USER->has_job_permissions(JOB_PERMISSION_STATISTICS)) {
                include($CFG->progdir.'/lib/statisticslib.php');
                job_statistics($output);
            } else {
                $output->add_content("<h2>".t('access_denied','admin')."</h2>");
                $output->add_content(t('job_access_denied','admin'));
                $output->add_message(t('job_access_denied','admin'));
            }
            break;

        case JOB_TOOLS:
            if ($USER->has_job_permissions(JOB_PERMISSION_TOOLS)) {
                // user has permission to access at least one of the tools
                include($CFG->progdir.'/lib/toolslib.php');
                job_tools($output);
            } else {
                $output->add_content("<h2>".t('access_denied','admin')."</h2>");
                $output->add_content(t('job_access_denied','admin'));
                $output->add_message(t('job_access_denied','admin'));
            }
            break;

        case JOB_UPDATE:
            if ($USER->has_job_permissions(JOB_PERMISSION_UPDATE)) {
                // user has permission to access the update routine(s)
                include($CFG->progdir.'/lib/updatelib.php');
                job_update($output);
            } else {
                $output->add_content("<h2>".t('access_denied','admin')."</h2>");
                $output->add_content(t('job_access_denied','admin'));
                $output->add_message(t('job_access_denied','admin'));
            }
            break;

        default:
            if (!empty($job)) {
                $output->add_content("<h2>".t('access_denied','admin')."</h2>");
                $output->add_content(t('unknown_job','admin',array('{JOB}'=>htmlspecialchars($job))));
                $output->add_message(t('unknown_job','admin',array('{JOB}'=>htmlspecialchars($job))));
                logger("'".$USER->username."': unknown job '".htmlspecialchars($job)."'");
            } else {
                job_start($output);
            }
            break;
    }

    // the various functions job_*() will have put their output in $output
    // Now it is time to actually output the output to the user's browser.
    $output->send_output();

    // make sure that any changes in $_SESSION are properly stored
    // note that we close the session only after all processing is done,
    // allowing the various job_*()'s to manipulate the session variables
    session_write_close();

    // at this point we have sent the page to the user,
    // we can now use the remaining time in this run to process
    // a few alerts (if any).
    cron_send_queued_alerts(25); // if there are more than 25, do them later or let cron do it.
    return;
} // main_admin()


/** generate the start centre page
 *
 * This is the handler for the start centre. This is the only
 * handler that is NOT included from another file. Basically
 * it shows a screen with hints on how to proceed with this program.
 *
 * @param object &$output output collector
 * @return void
 * @todo this routine is a stub
 */
function job_start(&$output) {
    global $USER, $WAS_SCRIPT_NAME,$CFG,$LANGUAGE;

    $output->add_content("<h2>".t('startcenter_welcome','admin')."</h2>");
    $output->add_content(t('startcenter_welcome_text','admin'));

    // Documentation index
    $url = $CFG->progwww_short.'/manual.php';
    $title = t('click_here_for_documentation','admin');
    $img = html_img($CFG->progwww_short.'/graphics/book.gif',
                    array('title' => $title, 'alt' => t('icon_documentation','admin')));
    $a_tag = html_a($url,
                    array('language' => $LANGUAGE->get_current_language()),
                    array('title' => $title, 'target' => '_blank',
                          'onclick' => "window.open('$url','','left=100,top=100,height=480,width=640');return false;"),
                    $img);
    $output->add_content('<p>');
    $output->add_content($a_tag);
    $output->add_content(t('view_documentation','admin'));

    // Check your version

    $url = get_versioncheck_url();
    $title = t('check_was_release','admin');
    $img = html_img($CFG->progwww_short.'/graphics/info.gif',
                    array('title' => $title, 'alt' => t('icon_information','admin')));
    $a_tag = sprintf('<a href="%s" target="_blank" title="%s" onclick="%s">%s</a>',
                              $url,
                              $title,
                              "window.open('$url','','left=100,top=100,width=640,height=320'); return false;",
                              $img)."\n";

    $output->add_content('<p>');
    $output->add_content($a_tag);
    $output->add_content(t('check_new_version','admin',array('{VERSION}' => WAS_RELEASE)));


    // Please send us mail
    $title = t('click_to_send_mail_to_us','admin');
    $email_address = 'online@websiteatschool.eu';
    $img = html_img($CFG->progwww_short.'/graphics/e-mail2.gif',
                    array('title'=>$title,'alt'=> t('icon_sendmail','admin')));
    $a_tag = html_a('mailto:'.$email_address,NULL,array('title' => $title),$img);

    $output->add_content('<p>');
    $output->add_content($a_tag);
    $output->add_content(t('please_send_us_mail','admin',array('{MAILTO}' => $email_address)));

} // job_start()


/** logout the user and exit
 *
 * This logs out the user (ie kills the session)
 * If there is an error (ie, there was no session in the first place)
 * indicated by was_logout() returning, we
 * unconditionally show a login dialog and exit.
 * So, this routine never returns.
 *
 * @return void this function never returns
 * @uses $CFG
 * @uses loginlib.php
 */
function admin_logout_and_exit() {
    global $CFG;
    /** loginlib.php contains both login- and logout-routines */
    require_once($CFG->progdir.'/lib/loginlib.php');
    was_logout();
    was_login(LOGIN_PROCEDURE_SHOWLOGIN);
    exit;
} // admin_logout_and_exit()


/** perform a step in the login procedure
 *
 * This routine may not return at all. If it returns,
 * the user is logged in successfully and the return value is
 * the user_id (unique identification for the user, pkey in users table).
 * The steps in the login procedure are defined in {@link loginlib.php}.
 *
 * @parameter mixed $step the step in the login procedure
 * @return void|int if the function returns it returns an integer indicating the user_id
 * @uses $CFG
 * @uses loginlib.php
 */
function admin_login($step) {
    global $CFG;
    /** loginlib.php contains both login- and logout-routines */
    require_once($CFG->progdir.'/lib/loginlib.php');
    $user_id = was_login($step);
    if (isset($_SESSION)) {
        if (!isset($_SESSION['session_counter'])) { // first time after login, record start time of session
            $_SESSION['session_counter'] = 1;
            $_SESSION['session_start'] = strftime("%Y-%m-%d %T");
        } else {
            $_SESSION['session_counter']++;
        }
    }
    return $user_id;
} // admin_login()


/** continue the session from the previous call OR exit
 *
 * This tries to resume the session that was initiated before
 * (when the user logged in succesfully). If the session cannot
 * be resumed, we logout the user, show the login screen and exit.
 * In other words: this routine guarantees that a valid session
 * exists if and when this routine returns. If the routine returns,
 * it returns the user_id.
 *
 * @return void|int on success the $user_id is returned else a logout + exit is forced
 * @uses $CFG;
 * @uses dbsessionlib.php
 */
function admin_continue_session() {
    global $CFG;
    /** dbsessionlib.php contains our own database based session handler */
    require_once($CFG->progdir.'/lib/dbsessionlib.php');
    dbsession_setup($CFG->session_name);
    if (dbsession_exists($_COOKIE[$CFG->session_name])) {
        session_start();
    }
    if (!isset($_SESSION)) {
        admin_logout_and_exit();
    } else {
        if (!isset($_SESSION['session_counter'])) { // first time after login, record start time of session
            $_SESSION['session_counter'] = 1;
            $_SESSION['session_start'] = strftime("%Y-%m-%d %T");
        } else {
            $_SESSION['session_counter']++;
        }
        $user_id = $_SESSION['user_id'];
    }
    return $user_id;
} // admin_continue_session()


/** show login dialog and exit
 *
 * @return void this function never returns
 * @uses $CFG
 * @uses loginlib.php
 */
function admin_show_login_and_exit($message='') {
    global $CFG;
    /** loginlib.php contains both login- and logout-routines */
    require_once($CFG->progdir.'/lib/loginlib.php');
    was_login(LOGIN_PROCEDURE_SHOWLOGIN,$message);
    exit;
} // admin_show_login_and_exit()

/** add javascript code that implements a popup to the header part of the page 
 *
 */
function add_javascript_popup_function(&$output,$m='') {
    $javascript_code = array(
        "<script type=\"text/javascript\"><!--",
        "  var win = null;",
        "  function max(a,b) {",
        "    return (a > b) ? a : b;",
        "  }",
        "",
        "  function popup(url) {",
        "    var window_name = \"\";",
        "    var h_screen = self.screen.height;",
        "    var w_screen = self.screen.width;",
        "    var h_window = max(250,h_screen - 300);",
        "    var w_window = max(400,w_screen - 100);",
        "    var t_window = (h_screen - h_window) / 2; ",
        "    var l_window = (w_screen - w_window) / 2;",
        "    var features = \"top=\" + t_window+ \",left=\"+l_window+\",width=\"+w_window+\",height=\"+h_window+\",scrollbars,resizable\";",
        "    var win = window.open(url,window_name,features);",
        "    win.focus();",
        "  }",
        "  //--></script>"
        );
    foreach($javascript_code as $line) {
        $output->add_html_header($m.$line);
    }
    return;
} // add_javascript_popup_function()


/** add javascript code that implements a url selection (used in integration with FCKeditor)
 *
 */
function add_javascript_select_url_function(&$output,$m='') {
    $javascript_code = array(
        "<script type=\"text/javascript\"><!--",
        "  function select_url(url) {",
        "    window.opener.SetUrl(url);",
        "    window.close();",
        "  }",
        "  //--></script>"
        );
    foreach($javascript_code as $line) {
        $output->add_html_header($m.$line);
    }
    return;
} // add_javascript_select_url_function()


/** construct URL for version check agains the project's website
 *
 * this constructs the URL for checking the installed version against the
 * current version on the project's website. The remote site will respond
 * with a readable text and the user can decide to act on the information
 * (or not). We don't want to force any upgrades etc.
 *
 * @return string URL which points to the project's version check routine
 */
function get_versioncheck_url() {
    global $CFG;
    static $url = NULL;
    if ($url === NULL) {
        $url = sprintf('http://websiteatschool.eu/version/?release=%s&amp;date=%s&amp;version=%s&amp;check=%s',
                rawurlencode(WAS_RELEASE), rawurlencode(WAS_RELEASE_DATE), rawurlencode(WAS_VERSION),
                (WAS_ORIGINAL) ? '1' : '0');
    }
    return $url;
} // get_versioncheck_url()


/** conveniently collect output
 *
 * This class allows for a convenient way to temporarily store output,
 * in random order and still being able to output to the browser in the
 * correct order (eg. headers() first, etc.).
 *
 * This class 'knows' everything about the structure of a generated
 * page. Most of this knowledge is contained in $this-get_html();
 * The actual layout is defined in the corresponding stylesheets,
 * e.g. {@link admin_base.css}.
 *
 * Typical use of this object is to add HTML-code to various parts
 * of the page via the add_*() methods and finally sending the collected
 * output to the user's browser with $this->send_output(). That's it.
 *
 * @todo carefully check if we need more headers in html-head section of document, see {@link AdminOutput()}.
 * @todo add a 'funnel mode': disable all distracting links that could seduce the user to leave and leave
 *       locked records (eg. nodes)
 */
class AdminOutput {
    /** @var string the standard doctype (default: HTML 4.01 Transitional) */
    var $dtd = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">';

    /** @var string the title to display in both the title tag and in the page itself (usually the sitename) */
    var $title = '';

    /** @var string a subtitle displayed in the generated page (for the time being it is empty or has a &nbsp;) */
    var $subtitle = '';

    /** @var array collection of individual httP-headers that are to be sent _before_ any HTML is sent */
    var $http_headers = array();

    /** @var array collection of items/lines that will be output as part of the HTML-head section */
    var $html_head = array();

    /** @var array collection of items/lines that are part of the menu (could be empty) */
    var $menu = array();

    /** @var array collection of items/lines that are part of the content area */
    var $content = array();

    /** @var array collection of messages that are to be displayed just below the navigation bar */
    var $messages_inline = array();

    /** @var array collection of messages that are to be displayed via a javascript alert() at START of page */
    var $messages_top = array();

    /** @var array collection of messages that are to be displayed via a javascript alert() at END of page */
    var $messages_bottom = array();

    /** @var bool this switches the navigation between image-based and text-based */
    var $high_visibility = FALSE;

    /** @var string the additional parameter to add to the help link in the navigation */
    var $helptopic = '';

    /** @var array a list URL components etc. identifying the path that leads to the current screen */
    var $breadcrumbs = array();

    /** @var array a list URL components etc. comprising a list of links to paginated display of lists */
    var $pagination = array();

    /** @var bool if TRUE, the display should be in funnel-mode, ie. distracting links should be non-working */
    var $funnel_mode = FALSE;

    /** @var bool if TRUE, no output should be sent whatsoever */
    var $suppress_output = FALSE;

    /** constructor
     *
     * This sets up the object and adds the title and subtitle.
     *
     * @param string $title the title to display in both the title tag and inside the document
     * @param string $subtitle the text to display underneath the title in the document (or &nbsp; if empty)
     * @return void
     * @todo is it really wise to add a base header? It interferes with the session cookie
     *       whenever you login at another URL than the base+'admin.php'... Comment it out for now
     * @todo do we need a link rel="shortcut icon" type of header too?
     * @todo do we really need more meta-headers?
     */
    function AdminOutput($title='',$subtitle='') {
        global $CFG;
        $charset = 'UTF-8';
        $content_type = 'text/html; charset='.$charset;
        $this->add_http_header('Content-Type: '.$content_type);
        $this->title = (empty($title)) ? $CFG->title : $title;
        // This base header interferes with session cookies if
        // the user logs in using a URL different from the base URL + admin.php.
        // For now commented out this header
        // $this->add_html_header('<base href="'.$CFG->www.'/">');
        $this->subtitle = (empty($subtitle)) ? '&nbsp;' : $subtitle;
        $this->add_html_header('<title>'.$this->title.'</title>');
        $this->add_meta(array('MSSmartTagsPreventParsing' => 'TRUE'));
        $this->add_meta_http_equiv(array(
            'Content-Script-Type' => 'text/javascript',
            'Content-Style-Type' => 'text/css',
            'Content-Type' => $content_type)
            );
        $favicon_header = sprintf('<link rel="shortcut icon" href="%s">',$CFG->progwww_short.'/graphics/favicon.ico');
        $this->add_html_header($favicon_header);
    } // AdminOutput()

    /** send collected HTTP-headers to user's browser
     *
     * This sends the headers that still need to be sent.
     * These are collected in the array $this->http_headers.
     * If headers are already sent, this fact is logged (and the
     * collected headers are not sent).
     *
     * @return void
     */
    function send_headers() {
        if ((!empty($this->http_headers)) && (!$this->suppress_output)) {
            $file = '';
            $line = 0;
            if (headers_sent($file,$line)) {
                // headers were already sent, log this strange event
                $message = "headers were already sent in file $file($line):\n";
                foreach($this->http_headers as $hdr) {
                    $message .= $hdr."\n";
                }
                logger($message,LOG_DEBUG);
            } else {
                foreach($this->http_headers as $hdr) {
                    header($hdr);
                }
            }
        }
    } // send_headers()

    /** send collected output to user's browser
     *
     * This first sends any pending HTTP-headers and subsequently
     * outputs the page that is constructed by $this->get_html()
     * However, if the flag suppress_output is set then nothing is sent,
     * not even a header. This allows for routines that interact directly
     * with the user, e.g. a function to download a file.
     *
     * @return void
     */
    function send_output() {
        if ($this->suppress_output) {
            return;
        }
        $this->send_headers();
        echo $this->get_html();
    } // send_output()

    /** construct an output page in HTML
     *
     * This constructs a full HTML-page, starting at the DTD
     * and ending with the html closing tag.
     *
     * The page is constructed using nested DIVs, the layout
     * is taken care of in a separate style sheet. All knowledge
     * about the structure of the page is contained in this routine.
     *
     * The performance of the script (# of queries, execution time)
     * is calculated as late as possible, to catch as much as we can.
     * Therefore the construction is done in two parts and performance
     * is calculated last.
     *
     * The contents of the various DIVs is constructed in various
     * helper routines in order to make this routine easy to read
     * (by humans that is). The various helper routines all are called
     * with a string of space characters; this should improve the
     * the readability of the page that is generated eventually.
     *
     * Note that the routine $this->get_div_messages() does in fact
     * generate its own DIV tags. This is done in order to completely
     * get rid of the message DIV, we do not even want to see an empty
     * DIV if there are no message.
     *
     * @return string complete HTML-page, ready for output
     */     
    function get_html() {
        $s  = $this->dtd."\n".
              "<html>\n".
              "<head>\n".
              $this->get_html_head('  ').
              "</head>\n".
              "<body>\n".
              "  <div id=\"top\">\n".
                   $this->get_popups($this->messages_top,'    ').
              "  </div>\n".
              "  <div id=\"page\">\n".
              "    <div id=\"header\">\n".
              "      <div id=\"logo\">\n".
                       $this->get_logo('        ').
              "      </div>\n".
              "      <div id=\"quicktop\">\n".
                       $this->get_quicktop('        ').
              "      </div>\n".
              "      <h1>".$this->title."</h1>\n".
              "      <h2>".$this->subtitle."</h2>\n".
              "    </div>\n".
              "    <div id=\"navigation\">\n".
                     $this->get_navigation('      ',$this->high_visibility).
              "    </div>\n".
                   $this->get_div_messages('    ').
              "    <div id=\"menu\">\n".
                     $this->get_menu('      ').
              "    </div>\n".
              "    <div id=\"content\">\n".
                     $this->get_breadcrumbs('      ').
                     $this->get_content('      ').
                     $this->get_pagination('      ').
              "    </div>\n".
              "    <div id=\"footer\">\n".
              "      <div id=\"quickbottom\">\n";

        $t  =          $this->get_quickbottom('        ').
              "      </div>\n".
              "      <div id=\"address\">\n".
                         $this->get_address('        ').
              "      </div>\n".
              "    </div>\n".
              "  </div>\n".
              "  <div id=\"bottom\">\n".
                   $this->get_popups($this->messages_bottom,'    ').
              "  </div>\n".
              "</body>\n".
              "</html>\n";

        // we want to add the line with performance 
        // information as late as possible to catch
        // as much as we can 
        return $s.
               $this->get_bottomline('        ').
               $t;
    } // get_html()


    /** get all lines in the HTML head section in a single properly indented string
     *
     * @param string $m left margin for increased readability
     * @return string generated HTML-code
     */
    function get_html_head($m='') {
        return $this->get_lines($this->html_head,$m);
    } // get_html_head()


    /** get all lines in the content DIV in a single properly indented string
     *
     * @param string $m left margin for increased readability
     * @return string generated HTML-code
     */
    function get_content($m='') {
        return $this->get_lines($this->content,$m);
    } // get_content()


    /** get all lines in the menu DIV in a single properly indented string
     *
     * @param string $m left margin for increased readability
     * @return string generated HTML-code
     */
    function get_menu($m='') {
        return $this->get_lines($this->menu,$m);
    } // get_menu()


    /** get lines from an array in a single properly indented string
     *
     * This is a workhorse to convert an array of lines to a
     * properly indented block of text.
     *
     * @param string $m left margin for increased readability
     * @return string properly indented block of text
     */
    function get_lines($a,$m='') {
        $s = '';
        if (!empty($a)) {
            foreach($a as $line) {
                $s .= $m.$line."\n";
            }
        }
        return $s;
    } // get_lines()


    /** get a perhaps bulleted list of messages in a DIV
     *
     * This constructs an unordered list with messages, if there are any 
     * If there is no message at all, an empty string is returned (without DIV).
     * If there is a single message, no bullet is added to the message.
     * If there are two or more messages, bullets are added.
     *
     * Note that this routine is an exception with respect to
     * the DIV-tags: this helper routine DOES generate its own DIVs
     * whenever there is at least 1 message. This means that there
     * is no DIV at all when there are no messages.
     *
     * @param string $m left margin for increased readability
     * @return string constructed HTML with message(s) or empty string if no messages
     */
    function get_div_messages($m='') {
        $s = '';
        if (!empty($this->messages_inline)) {
            $s .= $m."<div id=\"messages\">\n";
            if (sizeof($this->messages_inline) > 1) {
                $ul_start = $m."  <ul>\n";
                $ul_stop  = $m."  </ul>\n";
                $li       = $m."    <li>";
            } else {
                $ul_start = '';
                $ul_stop  = '';
                $li       = $m."  ";
            }
            $s .= $ul_start;
            foreach ($this->messages_inline as $msg) {
                $s .= $li.$msg."\n";
            }
            $s .= $ul_stop;
            $s .= $m."</div>\n";
        }
        return $s;
    } // get_div_messages()


    /** construct javascript alerts for messages
     *
     * This constructs a piece of HTML that yields 0 or more
     * calles to the javascript alert() function, once per message.
     * If no messages need to be displayed an empty string is
     * returned.
     *
     * @param array @messages a collection of message to display via alert()
     * @param string $m left margin for increased readability
     * @return string generated HTML-code with Javascript or empty string
     */
    function get_popups($messages,$m='') {
        $s = '';
        if (!empty($messages)) {
            $s .= $m."<script>\n".
                  $m."<!--\n";
            foreach($messages as $message) {
                  $s .= $m."  ".javascript_alert($message)."\n";
            }
            $s .= $m."-->\n".
                  $m."</script>\n";
        }
        return $s;
    } // get_popups()


    /** construct an image tag with the W@S logo
     *
     * This constructs HTML-code that displays the W@S logo.
     * As an added twist, the version of W@S is added to the title
     * attribute, which makes it very easy to determine the
     * version of W@S that is is used: a simple mouseover.
     * However, the most space is used to display the message
     * about the logo being a registered trademark.
     *
     * Note (added 2010-12-02):
     * We increased the height of the header from 53 to 71
     * in order to accomodate a slightly larger logo including
     * the three jigsaw-pieces. We want to phase out the version
     * used during development without the jigsaw pieces.
     *
     * @param string $m left margin for increased readability
     * @return string constructed image tag
     */
    function get_logo($m='') {
        global $CFG,$WAS_SCRIPT_NAME;
        $img_attr = array(
            'width' => 284, 
            'height' => 71,
            'title' => sprintf('(v%s) %s',
                               WAS_RELEASE,
                               'The Website@School logo is a registered trademark of Vereniging Website At School'),
                          'alt' => t('logo_websiteatschool','admin'));
        $anchor = html_img($CFG->progwww_short.'/graphics/waslogo-284x71.png',$img_attr);
        $href = ($this->funnel_mode) ? '#' : $WAS_SCRIPT_NAME;
        $a_attr = ($this->funnel_mode) ? array('class' => 'dimmed') : NULL;
        return $m.html_a($href,NULL,$a_attr,$anchor)."\n";
    } // get_logo()


    /** construct a list of quicklinks for top of page, including logout link
     *
     * This creates HTML-code for a few links that can be displayed at the top
     * of the page. These links are:
     *
     *  - a logout link (which will end the user's session)
     *  - a link to the main site (i.e. /index.php without any addition parameters)
     *  - a link to the version checker on the project's home page
     *
     * Note that the latter opens in a smallish new window that can
     * be easily dismissed without 'losing' the main page. 
     *
     * @param string $m left margin for increased readability
     * @return string constructed list of clickable links
     */
    function get_quicktop($m='') {
        global $USER,$WAS_SCRIPT_NAME,$CFG;

        $s = '';
        $a_attr = ($this->funnel_mode) ? array('class' => 'dimmed') : array();

        // 1 -- logout
        $href = ($this->funnel_mode) ? '#' : $WAS_SCRIPT_NAME."?logout";
        $a_attr['title'] = t('end_this_session','admin');
        $username = (empty($USER->full_name)) ? $USER->username : $USER->full_name;
        $anchor = t('logout_username','admin',array('{USERNAME}' => htmlspecialchars($username)));
        $s .= $m.html_a($href,NULL,$a_attr,$anchor)."\n";

        // 2 -- public area
        $href = ($this->funnel_mode) ? '#' : $CFG->www_short.'/index.php';
        $a_attr['title'] = t('go_view_public_area_no_logout','admin');
        $anchor = t('view_public_area','admin');
        $s .= $m.html_a($href,NULL,$a_attr,$anchor)."\n";

        // 3 -- version check in separate window (=> no funnelcheck)
        $url = get_versioncheck_url();
        $s  .= $m.sprintf('<a href="%s" target="_blank" title="%s" onclick="%s">%s</a>',
                              $url,
                              t('check_was_release','admin'),
                              "window.open('$url','','left=100,top=100,width=640,height=320'); return false;",
                              t('version_x_y_z','admin',array('{VERSION}' => WAS_RELEASE)))."\n";
        return $s;
    } // get_quicktop()


    /** construct a list of quicklinks for botton of page
     *
     * This creates HTML-code for a few links that can be displayed at the bottom
     * of the page. Currently this list is has 1 link. Possible links are
     *
     *  - a logout link (which will end the user's session)
     *  - a link to the main site (i.e. /index.php without any addition parameters)
     *  - a link to the version checker on the project's home page
     *
     * (see also {@link get_quicktop()}).
     *
     * @param string $m left margin for increased readability
     * @return string constructed list of clickable links
     */
    function get_quickbottom($m='') {
        global $USER,$WAS_SCRIPT_NAME,$CFG;
        $s = '';
        $a_attr = ($this->funnel_mode) ? array('class' => 'dimmed') : array();
        $href = ($this->funnel_mode) ? '#' : $WAS_SCRIPT_NAME."?logout";
        $a_attr['title'] = t('end_this_session','admin');
        $anchor = t('logout_username','admin',array('{USERNAME}' => htmlspecialchars($USER->username)));
        $s .= $m."| ".html_a($href,NULL,$a_attr,$anchor)."\n";
        return $s;
    } // get_quickbottom()


    /** construct a navigation bar for various jobs the user is allowed to do
     *
     * This constructs an unordered list (UL) with items, where each item is a
     * clickable link to one of the various 'managers' (e.g. page manger, file manager, etc.).
     *
     * There are several different 'modes' for this function. The type of output
     * not only depends on the $textonly flag, but also on the user's permissions
     * for the various 'managers'. This information is retrieved from the global
     * $USER object.
     *
     * The list of available options is stored in an array of arrays. This should
     * make it easier to add a new 'manager' in the future: simply add another
     * element to the $items array below (and of course the necessary changes in
     * the dipatcher in main_admin() above).
     *
     * A a rule the links are presented to the user in the form of clickable images
     * (icons) of 32x32 pixels. If no image is specified, a text-link is used instead.
     * If the optional flag $textonly is set, _all_ links are displayed as a text-link.
     *
     * Depending on the user's privileges, access to some 'managers' is denied. This
     * is visualised by displaying either a black/white 32x32 image (instead of the
     * coloured icon) or by adding the class 'dimmed' to the text-based anchor tags.
     * This makes it possible to show 'dimmed' or 'greyed out' text if the user has
     * no access. Note, however, that these 'forbidden' links are not suppressed: the
     * W@S philosophy says that everything should be transparent as possible and that
     * rules out the option to suppress the things the user is not supposed to do.
     * If the user does follow the 'dimmed' links, an error message is displayed 
     * (see the code in the dispatcher in {@link main_admin()} above).
     * One last note on this issue of denying access in a transparent way: the mousover
     * already indicate that access will be denied. That should provide an extra clue
     * to the user.
     *
     * The list of items contains a link to the start centre (the first link) and also
     * a link to the documentation (the last link). Both items are goverend by the
     * same privilege mask: JOB_PERMISSION_STARTCENTER. Basically it means that everyone
     * with minimal administrator privileges has access to both the start centre and
     * the help function. Effectively this is everyone that has access to admin.php
     * so the images startcenter-bw.gif and help-bw.gif do not really make sense, but
     * for completeness sake...
     *
     * @param string $m left margin for increased readability
     * @param bool $textonly if TRUE, no images are used to construct navigation links
     * @return string constructed navigation bar
     * @todo we need to clean up this code and properly implement the funnel mode (2009-12-18)
     */
    function get_navigation($m='',$textonly=FALSE) {
        global $USER,$CFG,$WAS_SCRIPT_NAME,$LANGUAGE;

        $helpurl = $CFG->progwww_short.'/manual.php?language='.$LANGUAGE->get_current_language();
        if (!empty($this->helptopic)) {
            $helpurl .= '&amp;topic='.rawurlencode($this->helptopic);
        }
        $items = array(
            array(
                'url' => $WAS_SCRIPT_NAME.'?job='.htmlspecialchars(JOB_STARTCENTER),
                'name' => t('name_startcenter','admin'),
                'img' => array('src'=>$CFG->progwww_short.'/graphics/startcenter.gif','width'=>32,'height'=>32),
                'img_bw' => array('src'=>$CFG->progwww_short.'/graphics/startcenter-bw.gif','width'=>32,'height'=>32),
                'description' => t('description_startcenter','admin'),
                'msg_no_access' => t('no_access_startcenter','admin'),
                'mask' => JOB_PERMISSION_STARTCENTER
            ),
            array(
                'url' => $WAS_SCRIPT_NAME.'?job='.htmlspecialchars(JOB_PAGEMANAGER),
                'name' => t('name_pagemanager','admin'),
                'img' => array('src'=>$CFG->progwww_short.'/graphics/pagemanager.gif','width'=>32,'height'=>32),
                'img_bw' => array('src'=>$CFG->progwww_short.'/graphics/pagemanager-bw.gif','width'=>32,'height'=>32),
                'description' => t('description_pagemanager','admin'),
                'msg_no_access' => t('no_access_pagemanager','admin'),
                'mask' => JOB_PERMISSION_PAGEMANAGER
            ),
            array(
                'url' => $WAS_SCRIPT_NAME.'?job='.htmlspecialchars(JOB_FILEMANAGER),
                'name' => t('name_filemanager','admin'),
                'img' => array('src'=>$CFG->progwww_short.'/graphics/filemanager.gif','width'=>32,'height'=>32),
                'img_bw' => array('src'=>$CFG->progwww_short.'/graphics/filemanager-bw.gif','width'=>32,'height'=>32),
                'description' => t('description_filemanager','admin'),
                'msg_no_access' => t('no_access_filemanager','admin'),
                'mask' => JOB_PERMISSION_FILEMANAGER
            ),
            array(
                'url' => $WAS_SCRIPT_NAME.'?job='.htmlspecialchars(JOB_MODULEMANAGER),
                'name' => t('name_modulemanager','admin'),
                'img' => array('src'=>$CFG->progwww_short.'/graphics/modules.gif','width'=>32,'height'=>32),
                'img_bw' => array('src'=>$CFG->progwww_short.'/graphics/modules-bw.gif','width'=>32,'height'=>32),
                'description' => t('description_modulemanager','admin'),
                'msg_no_access' => t('no_access_modulemanager','admin'),
                'mask' => JOB_PERMISSION_MODULEMANAGER
            ),
            array(
                'url' => $WAS_SCRIPT_NAME.'?job='.htmlspecialchars(JOB_ACCOUNTMANAGER),
                'name' => t('name_accountmanager','admin'),
                'img' => array('src'=>$CFG->progwww_short.'/graphics/accounts.gif','width'=>32,'height'=>32),
                'img_bw' => array('src'=>$CFG->progwww_short.'/graphics/accounts-bw.gif','width'=>32,'height'=>32),
                'description' => t('description_accountmanager','admin'),
                'msg_no_access' => t('no_access_modulemanager','admin'),
                'mask' => JOB_PERMISSION_ACCOUNTMANAGER
            ),
            array(
                'url' => $WAS_SCRIPT_NAME.'?job='.htmlspecialchars(JOB_CONFIGURATIONMANAGER),
                'name' => t('name_configurationmanager','admin'),
                'img' => array('src'=>$CFG->progwww_short.'/graphics/configuration.gif','width'=>32,'height'=>32),
                'img_bw' => array('src'=>$CFG->progwww_short.'/graphics/configuration-bw.gif','width'=>32,'height'=>32),
                'description' => t('description_configurationmanager','admin'),
                'msg_no_access' => t('no_access_configurationmanager','admin'),
                'mask' => JOB_PERMISSION_CONFIGURATIONMANAGER
            ),
            array(
                'url' => $WAS_SCRIPT_NAME.'?job='.htmlspecialchars(JOB_STATISTICS),
                'name' => t('name_statistics','admin'),
                'img' => array('src'=>$CFG->progwww_short.'/graphics/graph.gif','width'=>32,'height'=>32),
                'img_bw' => array('src'=>$CFG->progwww_short.'/graphics/graph-bw.gif','width'=>32,'height'=>32),
                'description' => t('description_statistics','admin'),
                'msg_no_access' => t('no_access_statistics','admin'),
                'mask' => JOB_PERMISSION_STATISTICS
            ),
            array(
                'url' => $WAS_SCRIPT_NAME.'?job='.htmlspecialchars(JOB_TOOLS),
                'name' => t('name_tools','admin'),
                'img' => array('src'=>$CFG->progwww_short.'/graphics/tools1.gif','width'=>32,'height'=>32),
                'img_bw' => array('src'=>$CFG->progwww_short.'/graphics/tools1-bw.gif','width'=>32,'height'=>32),
                'description' => t('description_tools','admin'),
                'msg_no_access' => t('no_access_tools','admin'),
                'mask' => JOB_PERMISSION_TOOLS
            ),
            array(
                'url' => $helpurl,
                'name' => t('name_help','admin'),
                'img' => array('src'=>$CFG->progwww_short.'/graphics/help.gif','width'=>32,'height'=>32),
                'img_bw' => array('src'=>$CFG->progwww_short.'/graphics/help-bw.gif','width'=>32,'height'=>32),
                'description' => t('description_help','admin'),
                'msg_no_access' => t('no_access_help','admin'),
                'mask' => JOB_PERMISSION_STARTCENTER,
                'li' => array('class' => 'right'),
                'a' => array('target' => '_blank',
                       'onclick' => "window.open('$helpurl','','left=100,top=100,height=480,width=640');return false;")
            )
        );

        // $s is the string that will hold the resulting string
        // we always start with a UL
        $s = $m."<ul>\n";
        foreach($items as $item) {

            // construct the LI tag with optional attributes
            $s .= $m."  <li";
            if (isset($item['li'])) {
                foreach($item['li'] as $attr => $value) {
                    $s .= " $attr=\"$value\"";
                }
            }
            $s .= '>';


            if ($USER->has_job_permissions($item['mask'])) {
                // construct anchor tag for the user 
                // that is granted access to this item
                $url = ($this->funnel_mode) ? "#" : $item['url'];
                $class = ($this->funnel_mode) ? ' class="dimmed"' : '';

                $s .= "<a href=\"{$url}\" title=\"{$item['description']}\"".$class;
                if (isset($item['a'])) {
                    foreach($item['a'] as $attr => $value) {
                        $s .= " $attr=\"$value\"";
                    }
                }
                $s .= ">";

                // decide whether to show a colourful image or a text link
                $img = ($this->funnel_mode) ? 'img_bw' : 'img'; // always in b/w if in funnel mode
                if ((isset($item[$img])) && !($textonly)) {
                    $s .= '<img';
                    foreach($item[$img] as $attr => $value) {
                        $s .= " $attr=\"$value\"";
                    }
                    $s .= " title=\"{$item['description']}\" alt=\"{$item['name']}\">";
                } else {
                    $s .= $item['name'];
                }
                $s .= "</a>\n";
            } else {
                // construct anchor tag for the user 
                // that is denied access to this item
                $url = ($this->funnel_mode) ? "#" : $item['url'];
                $s .= "<a href=\"{$url}\" title=\"{$item['msg_no_access']}\" class=\"dimmed\">";

                // decide whether to show a black/white image or a (dimmed) text link
                if ((isset($item['img_bw'])) && !($textonly)) {
                    $s .= '<img';
                    foreach($item['img_bw'] as $attr => $value) {
                        $s .= " $attr=\"$value\"";
                    }
                    $s .= " title=\"{$item['msg_no_access']}\" alt=\"{$item['name']}\">";
                } else {
                    $s .= $item['name'];
                }
                $s .= "</a>\n";
            }
        }
        $s .= $m."</ul>\n";
        return $s;
    } // get_navigation()


    /** report basic performance indicators in a single line
     *
     * This calculates the execution time of the script and the
     * number of queries. Note a special trick: we retrieve
     * the translated string in a dummy variable before calculating
     * the number of queries because otherwise we might miss one 
     * or more query from the language/translation subsystem.
     *
     * Note that the message containing the performance indicators
     * is only generated when debug is TRUE; the information is not
     * that interesting for ordinary users.
     *
     * @param string $m left margin for increased readability
     * @return string performance report
     */
    function get_bottomline($m='') {
        global $CFG;
        $bottom_line = appropriate_legal_notices($this->high_visibility,$m)."\n";
        if ($CFG->debug) {
            $dummy = t('generated_in','admin');
            $a = array('{DATE}'=>strftime("%Y-%m-%d %T"),
                       '{QUERIES}'=>performance_get_queries(),
                       '{SECONDS}'=>sprintf("%01.3f",performance_get_seconds()));
               $bottom_line .= $m."| ".t('generated_in','admin',$a)."\n";
        }
        return $bottom_line;
    } // get_bottomline()

    /** return the reconstructed URL in a single (indented) line
     *
     * This constructs the exact URL (including the GET-parameters)
     * of the current script. This URL is returned as HTML so it
     * can be displyed. It is NOT meant to be a clickable link, but
     * as a documentation of the actual URL that was used. Note that
     * this URL can be suppressed by an appropriate 'display:none'
     * in the stylesheet, making it an item that only appears on
     * a hardcopy (media="print") and not on screen.
     *
     * @param string $m left margin for increased readability
     * @return string reconstructed URL as text
     */
    function get_address($m='') {
        global $WAS_SCRIPT_NAME,$CFG;
        $url = t('url','admin').': '.$CFG->www.$WAS_SCRIPT_NAME;
        if (!empty($_GET)) {
            $glue = '?';
            foreach($_GET as $k => $v) {
                $url .= $glue.rawurlencode($k).'='.rawurlencode($v);
                $glue = '&amp;';
            }    
        }
        return $m.$url."\n";
    } // get_address()

    /** retrieve/construct a list of 0 or more clickable breadcrumbs
     *
     * this reads the breadcrumbs-array and constructs the breadcrumb trail
     * If $this->funnel_mode is TRUE, the links are still clickable
     * but the href-part is replaced with a "#" instead of the 'real' href
     * + parameters.
     *
     * @param string $m left margin for increased readability
     * @return string constructed HTML implementing the breadcrumb trail
     */
    function get_breadcrumbs($m='') {
        $s = '';
        if (sizeof($this->breadcrumbs) >0) {
            $s .= $m."<div id=\"breadcrumbs\">\n";
            $glue = t('breadcrumb_you_are_here','admin');
            foreach($this->breadcrumbs as $breadcrumb) {
                if ($this->funnel_mode) {
                    $href = "#";
                    $parameters = NULL;
                } else {
                    $href = $breadcrumb['href'];
                    $parameters = $breadcrumb['parameters'];
                }
                $anchor = strtolower($breadcrumb['anchor']);
                $s .= $m.'  '.$glue.' '.html_a($href,$parameters,$breadcrumb['attributes'],$anchor)."\n";
                $glue = t('breadcrumb_next','admin');;
            }
            $s .= $m."</div>\n";
        }
        return $s;
    } // get_breadcrumbs()


    /** retrieve/construct a list of 0 or more clickable links to paginated screens
     *
     * this reads the pagination-array and constructs a list of links to individual
     * screens of a paginated display of a list.
     *
     * If $this->funnel_mode is TRUE, the links are still clickable
     * but the href-part is replaced with a "#" instead of the 'real' href
     * + parameters.
     *
     * @param string $m left margin for increased readability
     * @return string constructed HTML implementing the links to the screens
     */
    function get_pagination($m='') {
        $s = '';
        if (sizeof($this->pagination) >0) {
            $s .= $m."<div id=\"pagination\">\n";
            $glue = t('pagination_start','admin');
            foreach($this->pagination as $link) {
                if ($this->funnel_mode) {
                    $href = "#";
                    $parameters = NULL;
                } else {
                    $href = $link['href'];
                    $parameters = $link['parameters'];
                }
                // $anchor = strtolower($link['anchor']);
                $anchor = $link['anchor'];
                $s .= $m.'  '.$glue.' '.html_a($href,$parameters,$link['attributes'],$anchor)."\n";
                $glue = t('pagination_glue','admin');;
            }
            $s .= $m."</div>\n";
        }
        return $s;
    } // get_pagination()


    /** add an HTTP-header
     *
     * @param string headerline to add
     * @return void
     */
    function add_http_header($headerline) {
        $this->http_head[] = $headerline;
    } // add_http_header()

    /** add a header to the HTML head part of the document
     *
     * @param string headerline to add
     * @return void
     */
    function add_html_header($headerline) {
        $this->html_head[] = $headerline;
    } // add_html_header()


    /** add a message to the list of popup-messages at the TOP of the document
     *
     * @param string|array $message message(s) to add
     * @return void
     */
    function add_popup_top($message) {
        if (is_array($message)) {
            $this->messages_top = array_merge($this->messages_top,$message);
        } else {
            $this->messages_top[] = $message;
        }
    } // add_popup_top()


    /** add a message to the list of popup-messages at the BOTTOM of the document
     *
     * @param string|array $message message(s) to add
     * @return void
     */
    function add_popup_bottom($message) {
        if (is_array($message)) {
            $this->messages_bottom = array_merge($this->messages_bottom,$message);
        } else {
            $this->messages_bottom[] = $message;
        }
    } // add_popup_bottom()


    /** add a message to the list of inline messages, part of the BODY of the document
     *
     * @param string|array $message message(s) to add inline
     * @return void
     */
    function add_message($message) {
        if (is_array($message)) {
            $this->messages_inline = array_merge($this->messages_inline,$message);
        } else {
            $this->messages_inline[] = $message;
        }
    } // add_message()


    /** add a link to a stylesheet to the HTML head part of the document
     *
     * @param string $url url of the stylesheet
     * @return void
     */
    function add_stylesheet($url) {
        $s = '<link rel="stylesheet" type="text/css" href="'.htmlspecialchars($url).'">';
        $this->add_html_header($s);
    } // add_stylesheet()


    /** add a line with meta-information to the HTML head part of the document
     *
     * @param array $meta an array with name-value-pairs that should be added to the HTML head part
     * @return void
     */
    function add_meta($meta) {
        foreach($meta as $name => $content) {
            $this->add_html_header('<meta name="'.htmlspecialchars($name).'" content="'.htmlspecialchars($content).'">');
        }
    } // add_meta()


    /** add a line with http-equiv meta-information to the HTML head part of the document
     *
     * @param array $meta an array with name-value-pairs that should be added to the HTML head part
     * @return void
     */
    function add_meta_http_equiv($meta) {
        foreach($meta as $name => $content) {
            $this->add_html_header('<meta http-equiv="'.htmlspecialchars($name).'" content="'.htmlspecialchars($content).'">');
        }
    } // add_meta_http_equiv()

    /** add a line or array of lines to the content part of the document
     *
     * @param string|array $content the line(s) of text to add
     * @return void
     */
    function add_content($content) {
        if (is_array($content)) {
            $this->content = array_merge($this->content,$content);
        } else {
            $this->content[] = $content;
        }
    } // add_content()

    /** add a line to the menu part of the document
     *
     * @param string $menuline the line of text to add
     * @return void
     */
    function add_menu($menuline) {
        $this->menu[] = $menuline;
    } // add_menu()

    /** set the additional help topic to show when user clicks help button
     *
     * @param string $topic the topic in the help function
     * @return string the old help topic
     */
    function set_helptopic($topic) {
        $old_topic = $this->helptopic;
        $this->helptopic = $topic;
        return $old_topic;
    } // set_helptopic()

    /** add a breadcrumb to the breadcrumb trail
     *
     * this stores information about a crumb in the breadcrumb trail into the
     * breadcrumbs array. We store this information in pieces that are readily
     * usable with {@link html_a()}. However, by constructing the links at the
     * latest possible time, we are able to suppress the real links, by replacing
     * the href + parameters with a bare "#". This trick can be used to keep
     * the user focussed on the task at hand (in 'funnel-mode').
     *
     * @param string $href holds the hypertext reference
     * @param string|array $params holds the parameters to add to the $href
     * @param string|array $attributes holds the attributes to add to the tag
     * @param string $anchor the text that identifies the breadcrumb
     * @return void
     */
    function add_breadcrumb($href,$params=NULL,$attributes=NULL,$anchor=NULL) {
        $this->breadcrumbs[] = array(
            'href' => $href,
            'parameters' => $params,
            'attributes' => $attributes,
            'anchor' => $anchor);
    } // add_breadcrumb()


    /** add a link to screen of a paginated list to the existing list
     *
     * this stores information about a screen in the paginated display
     * of a list. We store this information in pieces that are readily
     * usable with {@link html_a()}. However, by constructing the links at the
     * latest possible time, we are able to suppress the real links, by replacing
     * the href + parameters with a bare "#". This trick can be used to keep
     * the user focussed on the task at hand (in 'funnel-mode').
     *
     * @param string $href holds the hypertext reference
     * @param string|array $params holds the parameters to add to the $href
     * @param string|array $attributes holds the attributes to add to the tag
     * @param string $anchor the text that identifies the link
     * @return void
     */
    function add_pagination_item($href,$params=NULL,$attributes=NULL,$anchor=NULL) {
        $this->pagination[] = array(
            'href' => $href,
            'parameters' => $params,
            'attributes' => $attributes,
            'anchor' => $anchor);
    } // add_pagination_item()


    /** add a pagination navigation bar to the output 
     *
     * this adds a pagination navbar to the output making it easier
     * to step through a long listing of items a screen at a time
     *
     * Features:
     *  - the 'Prev' and 'Next' buttons do wrap: whenever we hit the begin/end of the
     *    list, we start again at the end/begin.
     *  - if there are more screens to show than $num_links, we show at most $num_links links
     *    whenever we are NOT at the start of the list, the smallest link is displayed
     *    differently (via translation), e.g. via a left bracket '&lt;' or three dots '...'
     *  - the same trick is used at the end of the list to indicate there's more
     *    (via a different translation), e.g. via a right bracket '&gt;' or three dots '...'
     *
     * This function returns the number of screens that is required to show all the items in
     * screesn of at most $limit items. The number of screens is at least 1.
     *
     * @param string $href the script to call
     * @param array $base_params the necessary parameters to land on the correct page
     * @param int $num_records the total length of the list
     * @param int $limit the preferred size of the screen to show
     * @param int $current_offset the record that starts the current screen
     * @param int $num_links the maximum number of pages to show in the navbar (excluding Prev/Next/All)
     * @return int number of screens (n >= 1) and output added to $this->pagination[]
     */
    function add_pagination($href,$base_params,$num_records,$limit,$current_offset,$num_links) {
        if (($num_records <= $limit) && ($current_offset == 0)) { // listing fits on a single screen, nothing to do
            $num_screens = 1;
            return $num_screens;
        }

        $num_links = intval($num_links / 2) * 2 + 1; // round up to nearest odd number
        $limit = (intval($limit) == 0) ? 1 : intval($limit); // divide by zero anyone? 

        // How many intervals (screens) are there to show?
        $num_screens = intval(($num_records + $limit - 1)/ $limit);
        $index_current = intval(($current_offset + 1) / $limit); // 0-based indicator for the interval of current screen
        $index_prev = ($index_current + $num_screens - 1) % $num_screens;
        $index_next = ($index_current + 1) % $num_screens;

        // 'Prev' link.
        $parameters = $base_params;
        $parameters['offset'] = $index_prev * $limit; // first item in previous interval
        $parameters['limit'] = $limit;
        $attributes = array();
        $anchor = t('pagination_previous','admin');
        $this->add_pagination_item($href,$parameters,$attributes,$anchor);

        // Now show a maximum of $num_links regular links
        if ($num_screens <= $num_links) {
            $index_first = 0;
            $index_last = $num_screens;
        } else {
            $index_first = max(0,$index_current - intval($num_links / 2));
            $index_last = $index_first + $num_links;
            if ($num_screens <= $index_last) {
                $index_last = $num_screens;
                $index_first = $index_last - $num_links;
            }
        }
        for ($index = $index_first; $index < $index_last; ++$index) {
            $parameters['offset'] = $index * $limit; // start at first item in the interval
            $attributes = ($index == $index_current) ? array('class' => 'current') : array();
            if ($num_screens <= $num_links) {
                $anchor = strval($index+1);
            } else {
                if (($index == $index_first) && ($index > 0)) {
                    $anchor = t('pagination_more_left','admin');
                } elseif (($index == $index_last - 1) && ($index_last < $num_screens)) {
                    $anchor = t('pagination_more_right','admin');
                } else {
                    $anchor = strval($index+1);
                }
            }
            $this->add_pagination_item($href,$parameters,$attributes,$anchor);
        }

        // 'Next' link
        $parameters['offset'] = $index_next * $limit; // first item in previous interval
        $attributes = array();
        $anchor = t('pagination_next','admin');
        $this->add_pagination_item($href,$parameters,$attributes,$anchor);

        // 'All' link
        $parameters['offset'] = 0;
        $parameters['limit'] = $num_records;
        $attributes = array();
        $anchor = t('pagination_all','admin');
        $this->add_pagination_item($href,$parameters,$attributes,$anchor);

        // Done
        return $num_screens;
    } // add_pagination()


    /** manipulate the funnel mode
     *
     * @param bool $funnel_mode if TRUE, funnel mode is switched on and distracting navigation links rendered inactive
     * @return bool the old value of the $funnel_mode
     */
    function set_funnel_mode($funnel_mode) {
        $old_funnel_mode = ($this->funnel_mode) ? TRUE : FALSE;
        $this->funnel_mode = ($funnel_mode) ? TRUE : FALSE;
        return $old_funnel_mode;
    } // set_funnel_mode()


    /** manipulate output suppression
     *
     * @param bool $suppress if TRUE, the actual output is suppressed (effectively disables send_output())
     * @return bool the old value of the $suppress_output
     */
    function set_suppress_output($suppress_output) {
        $old_suppress_output = ($this->suppress_output) ? TRUE : FALSE;
        $this->suppress_output = ($suppress_output) ? TRUE : FALSE;
        return $old_suppress_output;
    } // set_suppress_output()

} // AdminOutput

?>